{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\paper-dashboard-react\\\\src\\\\components\\\\calendar\\\\CalendarNote.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nfunction CalendarNote() {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [date, setDate] = useState(null);\n  const [year, setYear] = useState(null);\n  const [month, setMonth] = useState(null);\n  const [day, setDay] = useState(null);\n  const [hours, setHours] = useState(null);\n  const [minutes, setMinutes] = useState(null);\n  const [eventsArr, setEventsArr] = useState([]);\n  useEffect(() => {\n    // You can fetch events from an API or another data source here.\n    axios.get(\"https://sea-turtle-app-ocnii.ondigitalocean.app/appointments\").then(response => {\n      const responseData = response.data;\n      if (Array.isArray(responseData)) {\n        const newEventsArray = responseData.map(item => {\n          const start = new Date(item.appointmentDateTime);\n          const end = new Date(start);\n          end.setHours(end.getHours() + 1); // Add one hour to the end time\n\n          return {\n            start,\n            end,\n            title: item.service.serviceName,\n            notes: \"Barber: \".concat(item.barber.firstName, \" \").concat(item.barber.lastName, \"\\nCliente: \").concat(item.customer.firstName, \" \").concat(item.customer.lastName, \"\\nServicio: \").concat(item.service.description)\n          };\n        });\n        setEvents(newEventsArray);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n    });\n  }, []); // Empty dependency array to run the effect only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: events.map((event, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Title: \", event.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Start: \", event.start.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"End: \", event.end.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Notes: \", event.notes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarNote, \"B5HYzGjqInSrmhc3z0+Lx/NUOWM=\");\n_c = CalendarNote;\nexport default CalendarNote;\nvar _c;\n$RefreshReg$(_c, \"CalendarNote\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","momentLocalizer","moment","axios","jsxDEV","_jsxDEV","localizer","CalendarNote","_s","events","setEvents","date","setDate","year","setYear","month","setMonth","day","setDay","hours","setHours","minutes","setMinutes","eventsArr","setEventsArr","get","then","response","responseData","data","Array","isArray","newEventsArray","map","item","start","Date","appointmentDateTime","end","getHours","title","service","serviceName","notes","concat","barber","firstName","lastName","customer","description","catch","error","console","children","event","index","fileName","_jsxFileName","lineNumber","columnNumber","toString","_c","$RefreshReg$"],"sources":["C:/workspace/paper-dashboard-react/src/components/calendar/CalendarNote.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport axios from \"axios\";\r\n\r\nconst localizer = momentLocalizer(moment);\r\nfunction CalendarNote() {\r\n  const [events, setEvents] = useState([]);\r\n  const [date, setDate] = useState(null);\r\n  const [year, setYear] = useState(null);\r\n  const [month, setMonth] = useState(null);\r\n  const [day, setDay] = useState(null);\r\n  const [hours, setHours] = useState(null);\r\n  const [minutes, setMinutes] = useState(null);\r\n  const [eventsArr, setEventsArr] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // You can fetch events from an API or another data source here.\r\n    axios\r\n      .get(\"https://sea-turtle-app-ocnii.ondigitalocean.app/appointments\")\r\n      .then((response) => {\r\n        const responseData = response.data;\r\n        if (Array.isArray(responseData)) {\r\n          const newEventsArray = responseData.map((item) => {\r\n            const start = new Date(item.appointmentDateTime);\r\n            const end = new Date(start);\r\n            end.setHours(end.getHours() + 1); // Add one hour to the end time\r\n\r\n            return {\r\n              start,\r\n              end,\r\n              title: item.service.serviceName,\r\n              notes: `Barber: ${item.barber.firstName} ${item.barber.lastName}\\nCliente: ${item.customer.firstName} ${item.customer.lastName}\\nServicio: ${item.service.description}`,\r\n            };\r\n          });\r\n\r\n          setEvents(newEventsArray);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching data:\", error);\r\n      });\r\n  }, []); // Empty dependency array to run the effect only once\r\n\r\n  return (\r\n    <div>\r\n      {/* Render your component based on the fetched events */}\r\n      {events.map((event, index) => (\r\n        <div key={index}>\r\n          {/* Render event details */}\r\n          <p>Title: {event.title}</p>\r\n          <p>Start: {event.start.toString()}</p>\r\n          <p>End: {event.end.toString()}</p>\r\n          <p>Notes: {event.notes}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CalendarNote;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,eAAe,QAAQ,oBAAoB;AAC9D,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAO,mDAAmD;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGL,eAAe,CAACC,MAAM,CAAC;AACzC,SAASK,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACmB,GAAG,EAAEC,MAAM,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd;IACAI,KAAK,CACFsB,GAAG,CAAC,8DAA8D,CAAC,CACnEC,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAI;MAClC,IAAIC,KAAK,CAACC,OAAO,CAACH,YAAY,CAAC,EAAE;QAC/B,MAAMI,cAAc,GAAGJ,YAAY,CAACK,GAAG,CAAEC,IAAI,IAAK;UAChD,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAACF,IAAI,CAACG,mBAAmB,CAAC;UAChD,MAAMC,GAAG,GAAG,IAAIF,IAAI,CAACD,KAAK,CAAC;UAC3BG,GAAG,CAAClB,QAAQ,CAACkB,GAAG,CAACC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;UAElC,OAAO;YACLJ,KAAK;YACLG,GAAG;YACHE,KAAK,EAAEN,IAAI,CAACO,OAAO,CAACC,WAAW;YAC/BC,KAAK,aAAAC,MAAA,CAAaV,IAAI,CAACW,MAAM,CAACC,SAAS,OAAAF,MAAA,CAAIV,IAAI,CAACW,MAAM,CAACE,QAAQ,iBAAAH,MAAA,CAAcV,IAAI,CAACc,QAAQ,CAACF,SAAS,OAAAF,MAAA,CAAIV,IAAI,CAACc,QAAQ,CAACD,QAAQ,kBAAAH,MAAA,CAAeV,IAAI,CAACO,OAAO,CAACQ,WAAW;UACvK,CAAC;QACH,CAAC,CAAC;QAEFvC,SAAS,CAACsB,cAAc,CAAC;MAC3B;IACF,CAAC,CAAC,CACDkB,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACE9C,OAAA;IAAAgD,QAAA,EAEG5C,MAAM,CAACwB,GAAG,CAAC,CAACqB,KAAK,EAAEC,KAAK,kBACvBlD,OAAA;MAAAgD,QAAA,gBAEEhD,OAAA;QAAAgD,QAAA,GAAG,SAAO,EAACC,KAAK,CAACd,KAAK;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BtD,OAAA;QAAAgD,QAAA,GAAG,SAAO,EAACC,KAAK,CAACnB,KAAK,CAACyB,QAAQ,CAAC,CAAC;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtCtD,OAAA;QAAAgD,QAAA,GAAG,OAAK,EAACC,KAAK,CAAChB,GAAG,CAACsB,QAAQ,CAAC,CAAC;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClCtD,OAAA;QAAAgD,QAAA,GAAG,SAAO,EAACC,KAAK,CAACX,KAAK;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GALnBJ,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMV,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACnD,EAAA,CApDQD,YAAY;AAAAsD,EAAA,GAAZtD,YAAY;AAsDrB,eAAeA,YAAY;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\paper-dashboard-react\\\\src\\\\components\\\\calendar\\\\CalendarNote.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nfunction CalendarNote() {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [date, setDate] = useState(null);\n  const [year, setYear] = useState(null);\n  const [month, setMonth] = useState(null);\n  const [day, setDay] = useState(null);\n  const [hours, setHours] = useState(null);\n  const [minutes, setMinutes] = useState(null);\n  useEffect(() => {\n    // You can fetch events from an API or another data source here.\n    axios.get(\"https://sea-turtle-app-ocnii.ondigitalocean.app/appointments\").then(response => {\n      const dateObject = new Date(response.data[0].appointmentDateTime);\n      const year = dateObject.getFullYear();\n      const month = dateObject.getMonth();\n      const day = dateObject.getDate();\n      const minutes = dateObject.getMinutes();\n      const hour = dateObject.getHours();\n      setEventsArray(year, month, day, hour, minutes, response.data[0].service.serviceName, response.data[0].service.description);\n    });\n\n    // For this example, we'll use a sample event.\n  }, []);\n  function setEventsArray(year, mont, day, hour, min, service, description) {\n    const sampleEvent = {\n      start: new Date(year, mont, day, hour, min),\n      end: new Date(year, mont, day, hour + 1, min),\n      title: service,\n      notes: description\n    };\n    setEvents([sampleEvent]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: events,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      style: {\n        height: 500\n      },\n      onSelectEvent: event => {\n        // You can display the notes when an event is clicked here.\n        alert(\"Notes: \".concat(event.notes));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarNote, \"UM7GsYrOx0rrDCi9Yl1EsF/Dg8A=\");\n_c = CalendarNote;\nexport default CalendarNote;\nvar _c;\n$RefreshReg$(_c, \"CalendarNote\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","momentLocalizer","moment","axios","jsxDEV","_jsxDEV","localizer","CalendarNote","_s","events","setEvents","date","setDate","year","setYear","month","setMonth","day","setDay","hours","setHours","minutes","setMinutes","get","then","response","dateObject","Date","data","appointmentDateTime","getFullYear","getMonth","getDate","getMinutes","hour","getHours","setEventsArray","service","serviceName","description","mont","min","sampleEvent","start","end","title","notes","children","startAccessor","endAccessor","style","height","onSelectEvent","event","alert","concat","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/workspace/paper-dashboard-react/src/components/calendar/CalendarNote.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport axios from \"axios\";\r\n\r\nconst localizer = momentLocalizer(moment);\r\nfunction CalendarNote() {\r\n  const [events, setEvents] = useState([]);\r\n  const [date, setDate] = useState(null);\r\n  const [year, setYear] = useState(null);\r\n  const [month, setMonth] = useState(null);\r\n  const [day, setDay] = useState(null);\r\n  const [hours, setHours] = useState(null);\r\n  const [minutes, setMinutes] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // You can fetch events from an API or another data source here.\r\n    axios\r\n      .get(\"https://sea-turtle-app-ocnii.ondigitalocean.app/appointments\")\r\n      .then((response) => {\r\n        const dateObject = new Date(response.data[0].appointmentDateTime);\r\n        const year = dateObject.getFullYear();\r\n        const month = dateObject.getMonth();\r\n        const day = dateObject.getDate();\r\n        const minutes = dateObject.getMinutes();\r\n        const hour = dateObject.getHours();\r\n        setEventsArray(\r\n          year,\r\n          month,\r\n          day,\r\n          hour,\r\n          minutes,\r\n          response.data[0].service.serviceName,\r\n          response.data[0].service.description\r\n        );\r\n      });\r\n\r\n    // For this example, we'll use a sample event.\r\n  }, []);\r\n\r\n  function setEventsArray(year, mont, day, hour, min, service, description) {\r\n    const sampleEvent = {\r\n      start: new Date(year, mont, day, hour, min),\r\n      end: new Date(year, mont, day, hour + 1, min),\r\n      title: service,\r\n      notes: description,\r\n    };\r\n    setEvents([sampleEvent]);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Calendar\r\n        localizer={localizer}\r\n        events={events}\r\n        startAccessor=\"start\"\r\n        endAccessor=\"end\"\r\n        style={{ height: 500 }}\r\n        onSelectEvent={(event) => {\r\n          // You can display the notes when an event is clicked here.\r\n          alert(`Notes: ${event.notes}`);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default CalendarNote;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
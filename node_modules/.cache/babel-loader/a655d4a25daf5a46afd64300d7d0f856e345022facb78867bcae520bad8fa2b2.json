{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\paper-dashboard-react\\\\src\\\\components\\\\calendar\\\\CalendarNote.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nfunction CalendarNote() {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [date, setDate] = useState(null);\n  const [year, setYear] = useState(null);\n  const [month, setMonth] = useState(null);\n  const [day, setDay] = useState(null);\n  const [hours, setHours] = useState(null);\n  const [minutes, setMinutes] = useState(null);\n  const [eventsArr, setEventsArr] = useState([]);\n  useEffect(() => {\n    // You can fetch events from an API or another data source here.\n    axios.get(\"https://sea-turtle-app-ocnii.ondigitalocean.app/appointments\").then(response => {\n      const responseData = response.data;\n      if (Array.isArray(responseData)) {\n        const newEventsArray = responseData.map(item => ({\n          start: new Date(item.appointmentDateTime),\n          end: new Date(item.appointmentDateTime),\n          // Adjust this based on your requirements\n          title: item.service.serviceName,\n          notes: \"Barber: \".concat(item.barber.firstName, \" \").concat(item.barber.lastName, \"\\nCliente: \").concat(item.customer.firstName, \" \").concat(item.customer.lastName, \"\\nServicio: \").concat(item.service.description)\n        }));\n        setEvents(newEventsArray);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n    });\n\n    // For this example, we'll use a sample event.\n  }, [events, eventsArr]);\n  function setEventsArray(year, mont, day, hour, min, service, description, barber, customer) {\n    const descriptionServie = \"Barber: \" + barber + \"\\n\" + \"Cliente: \" + customer + \"\\n\" + \"Servicio: \" + description;\n    const sampleEvent = {\n      start: new Date(year, mont, day, hour, min),\n      end: new Date(year, mont, day, hour + 1, min),\n      title: service,\n      notes: descriptionServie\n    };\n    setEventsArr(prevData => [...prevData, sampleEvent]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: events,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      style: {\n        height: 500\n      },\n      onSelectEvent: event => {\n        // You can display the notes when an event is clicked here.\n        alert(\"Notes: \".concat(event.notes));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarNote, \"B5HYzGjqInSrmhc3z0+Lx/NUOWM=\");\n_c = CalendarNote;\nexport default CalendarNote;\nvar _c;\n$RefreshReg$(_c, \"CalendarNote\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","momentLocalizer","moment","axios","jsxDEV","_jsxDEV","localizer","CalendarNote","_s","events","setEvents","date","setDate","year","setYear","month","setMonth","day","setDay","hours","setHours","minutes","setMinutes","eventsArr","setEventsArr","get","then","response","responseData","data","Array","isArray","newEventsArray","map","item","start","Date","appointmentDateTime","end","title","service","serviceName","notes","concat","barber","firstName","lastName","customer","description","catch","error","console","setEventsArray","mont","hour","min","descriptionServie","sampleEvent","prevData","children","startAccessor","endAccessor","style","height","onSelectEvent","event","alert","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/workspace/paper-dashboard-react/src/components/calendar/CalendarNote.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport axios from \"axios\";\r\n\r\nconst localizer = momentLocalizer(moment);\r\nfunction CalendarNote() {\r\n  const [events, setEvents] = useState([]);\r\n  const [date, setDate] = useState(null);\r\n  const [year, setYear] = useState(null);\r\n  const [month, setMonth] = useState(null);\r\n  const [day, setDay] = useState(null);\r\n  const [hours, setHours] = useState(null);\r\n  const [minutes, setMinutes] = useState(null);\r\n  const [eventsArr, setEventsArr] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // You can fetch events from an API or another data source here.\r\n    axios\r\n      .get(\"https://sea-turtle-app-ocnii.ondigitalocean.app/appointments\")\r\n      .then((response) => {\r\n        const responseData = response.data;\r\n        if (Array.isArray(responseData)) {\r\n          const newEventsArray = responseData.map((item) => ({\r\n            start: new Date(item.appointmentDateTime),\r\n            end: new Date(item.appointmentDateTime), // Adjust this based on your requirements\r\n            title: item.service.serviceName,\r\n            notes: `Barber: ${item.barber.firstName} ${item.barber.lastName}\\nCliente: ${item.customer.firstName} ${item.customer.lastName}\\nServicio: ${item.service.description}`,\r\n          }));\r\n\r\n          setEvents(newEventsArray);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching data:\", error);\r\n      });\r\n\r\n    // For this example, we'll use a sample event.\r\n  }, [events, eventsArr]);\r\n\r\n  function setEventsArray(\r\n    year,\r\n    mont,\r\n    day,\r\n    hour,\r\n    min,\r\n    service,\r\n    description,\r\n    barber,\r\n    customer\r\n  ) {\r\n    const descriptionServie =\r\n      \"Barber: \" +\r\n      barber +\r\n      \"\\n\" +\r\n      \"Cliente: \" +\r\n      customer +\r\n      \"\\n\" +\r\n      \"Servicio: \" +\r\n      description;\r\n    const sampleEvent = {\r\n      start: new Date(year, mont, day, hour, min),\r\n      end: new Date(year, mont, day, hour + 1, min),\r\n      title: service,\r\n      notes: descriptionServie,\r\n    };\r\n    setEventsArr((prevData) => [...prevData, sampleEvent]);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Calendar\r\n        localizer={localizer}\r\n        events={events}\r\n        startAccessor=\"start\"\r\n        endAccessor=\"end\"\r\n        style={{ height: 500 }}\r\n        onSelectEvent={(event) => {\r\n          // You can display the notes when an event is clicked here.\r\n          alert(`Notes: ${event.notes}`);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default CalendarNote;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}